Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c(expr(quo(varname)), "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c(varname, "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c({{varname}}, "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
print({{varname}})
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
print(!!varname)
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
print(expr({{ var }}))
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
print(expr({{ varname }}))
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
print(quo_get_expr(varname))
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c("varname", "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
print(varname)
print(quo_name(varname))
# Output
return(Tab)
}
XTSUM(data,wage,id)
XTSUM <- function(data, varname, unit) {
# Xtsum
varname <- enquo(varname)
loc.unit <- enquo(unit)
ores <- data %>% summarise(Mean=mean(!! varname, na.rm=TRUE), sd=sd(!! varname, na.rm=TRUE), min = min(!! varname, na.rm=TRUE), max=max(!! varname, na.rm=TRUE), N=sum(as.numeric((!is.na(!! varname)))))
bmeans <- data %>% group_by(!! loc.unit) %>% summarise(meanx=mean(!! varname, na.rm=T), t.count=sum(as.numeric(!is.na(!! varname))))
bres <- bmeans %>% ungroup() %>% summarise(sd = sd(meanx, na.rm=TRUE), min = min(meanx, na.rm=TRUE), max=max(meanx, na.rm=TRUE), n=sum(as.numeric(!is.na(t.count))), `T-bar`=mean(t.count, na.rm=TRUE))
wdat <- data %>% group_by(!! loc.unit) %>% mutate(W.x = scale(!! varname, center=TRUE, scale=FALSE))
wres <- wdat %>% ungroup() %>% summarise(sd=sd(W.x, na.rm=TRUE), min=min(W.x, na.rm=TRUE), max=max(W.x, na.rm=TRUE))
# Loop to adjust the scales within group outputs against the overall mean
for(i in 2:3) {
wres[i] <- sum(ores[1], wres[i])
}
# Table Output
Variable <- matrix(c(quo_name(varname), "", ""), ncol=1)
Comparison <- matrix(c("Overall", "Between", "Within"), ncol=1)
Mean <- matrix(c(ores[1], "", ""), ncol=1)
Observations <- matrix(c(paste0("N = ", ores[5]), paste0("n = ", bres[4]), paste0("T-bar = ", round(bres[5], 4))), ncol=1)
Tab <- rbind(ores[2:4], bres[1:3], wres[1:3])
Tab <- cbind(Tab, Observations)
Tab <- cbind(Mean, Tab)
Tab <- cbind(Comparison, Tab)
Tab <- cbind(Variable, Tab)
# Output
return(Tab)
}
XTSUM(data,wage,id)
# The within-person variance (by id):
data %>% group_by(id) %>% summarise(var(wage), var(marr))
# The within-wave variance (by wave):
data %>% group_by(time) %>% summarise(var(wage), var(marr))
# And the overall variance:
data %>% ungroup() %>% summarise(var(wage), var(marr))
#sample variance using XTSUM
XTSUM(data,wage,id)
# The within-person variance (by id):
data %>% group_by(id) %>% summarise(sd(wage), var(marr))
# The within-wave variance (by wave):
data %>% group_by(time) %>% summarise(sd(wage), var(marr))
# And the overall variance:
data %>% ungroup() %>% summarise(sd(wage), var(marr))
#sample variance using XTSUM
XTSUM(data,wage,id)
XTSUM(data,marr,id)
70.7+44.7+283+283
681.4/4
data %>% group_by(time) %>% summarise(sd(wage), var(marr))
ggplot(data = data, aes(x = time, y = wage,group=as.factor(id),color=as.factor(marr))) +
geom_line() +
geom_point() +
labs(x = "Time",  y = "Gross income [EUR]",color="") +
theme_bw() +
theme(legend.position = "bottom") +
scale_color_discrete(labels = c("unmarried", "married"))
summary(lm(wage ~ marr, data=data %>% filter(time==4)))
mylm1 <- lm(wage ~ marr, data=data %>% filter(time==4))
summary(mylm1)
summary(lm(wage ~ marr, data=data %>% filter(time==4)))
summary(glm(marr ~ wage, data = mydata, family = "binomial"))
summary(glm(marr ~ wage, data=data %>% filter(time==4), family = "binomial"))
summary(glm(marr ~ wage, data=data %>% filter(time==4), family = binomial(link = "probit")))
summary(glm(marr ~ wage, data=data %>% filter(time==4), family = binomial(link = "logit")))
?msummary
library("modelsummary")
?msummary
msummary(list("model1"=mylm1)
)
library(stargazer)
?stargazer
stargazer(mylm1, type="text", out="./output/tab/regtable1.docx")
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ species)),
add_rows = se_info))
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ species)),
add_rows = se_info)
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ pid)),
add_rows = se_info)
mylm1
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ marr)),
add_rows = se_info)
model_basic <- lm(body_mass_g ~ bill_length_mm + flipper_length_mm + species,
data = penguins)
mylm1 <- lm(pglabnet ~ pgfamstd, data=base_ego_c %>% filter(syear==2010)) # select data only of one year and provide
base_ego_c
names(base_ego_c)
mylm1 <- lm(hghinc ~ sex, data=base_ego_c %>% filter(syear==2010)) # select data only of one year and provide the model
summary(mylm1)
mylm1 <- lm(hghinc ~ sex + migback, data=base_ego_c %>% filter(syear==2010)) # select data only of one year and provide the model
summary(mylm1)
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ pid)),
add_rows = se_info)
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ pid)),
add_rows = se_info)
?msummary
modelsummary(list("model1"=mylm1), vcov = "HAC")
modelsummary(list("model1"=mylm1), vcov = "robust")
modelsummary(list("model1"=mylm1), vcov = list("iid","robust"))
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ pid)),
add_rows = se_info)
modelsummary(list("model1"=mylm1), vcov = list("iid","robust", function(x) vcov(x)))
modelsummary(list("model1"=mylm1), vcov = list("iid"))
modelsummary(list("model1"=mylm1), vcov = list("iid"))
modelsummary(list("model1"=mylm1), vcov = list("iid","robust"))
modelsummary(list("model1"=mylm1), vcov = list("iid"))
summary(mylm1)
modelsummary(list("model1"=mylm1), vcov = "robust")
modelsummary(list("model1"=mylm1), vcov = "stata")
msummary(list("model1"=mylm1),
# Specify how to robustify/cluster the model
vcov = list("iid", "robust", "stata", function(x) vcovCL(x, cluster = ~ sex)))
modelsummary(list("model1"=mylm1), vcov = list("iid"))
modelsummary(list("model1"=mylm1), vcov = list("classical"))
modelsummary(list("model1"=mylm1), vcov = ~pid)
modelplot(list("model1"=mylm1))
modelplot(list("model1"=mylm1), vcov = "robust")
modelplot(list("model1"=mylm1, "model2"=mylm2, "model3"=mylm3), vcov = "robust") +
lab(x="Coefficient estimates and h-robust 95% confidence intervals")
modelplot(list("model1"=mylm1), vcov = "robust") +
lab(x="Coefficient estimates and 95% confidence intervals (HC3)")
modelplot(list("model1"=mylm1), vcov = "robust") +
xlab(x="Coefficient estimates and 95% confidence intervals (HC3)")
modelplot(list("model1"=mylm1), vcov = "robust") +
xlab("Coefficient estimates and 95% confidence intervals (HC3)")
modelplot(list("model1"=mylm1), vcov = "robust") +
labs(x="Coefficient estimates and 95% confidence intervals (HC3)")
modelplot(list("model1"=mylm1, "model2"=mylm2, "model3"=mylm3), vcov = "robust") +
labs(x="Coefficient estimates and 95% confidence intervals (HC3)")
modelplot(list("model1"=mylm1), vcov = "robust") +
labs(x="Coefficient estimates and 95% confidence intervals (HC3)")
# use the option coef_omit to only show the variable(s) of interest
modelplot(list("model1"=mylm1), vcov = "robust",
coef_omit = "sex|Intercept")
model1<-lm(wage ~ marr, data=data)            #incorrect default S.E.
summary(model1)
model1_robust_stata <- coeftest(model1,  #correct panel-robust S.E.
vcov = vcovCL,
type = "HC1",
cluster = ~id) # Note HC3 would be more conservative and performs better with small n --> http://datacolada.org/99
library(lmtest)    # Recalculate model errors with sandwich functions with coeftest()
model1_robust_stata <- coeftest(model1,  #correct panel-robust S.E.
vcov = vcovCL,
type = "HC1",
cluster = ~id) # Note HC3 would be more conservative and performs better with small n --> http://datacolada.org/99
library(sandwich)
model1_robust_stata <- coeftest(model1,  #correct panel-robust S.E.
vcov = vcovCL,
type = "HC1",
cluster = ~id) # Note HC3 would be more conservative and performs better with small n --> http://datacolada.org/99
model1_robust_stata
model1<-lm(wage ~ marr, data=data)            #incorrect default S.E.
library(sandwich)  # Adjust standard errors
library(lmtest)    # Recalculate model errors with sandwich functions with coeftest()
model1_robust_stata <- coeftest(model1,  #correct panel-robust S.E.
vcov = vcovCL,
type = "HC1",
cluster = ~id) # Note HC3 would be more conservative and performs better with small n --> http://datacolada.org/99
model1_robust_stata
msummary(list("model1"=model1), vcov = "stata") # robust standard errors HC1
msummary(list("model1"=model1),vcov = ~id) # robust standard errors HC1
model1_robust_stata <- coeftest(model1,  #correct panel-robust S.E.
vcov = vcovCL,
type = "HC3",
cluster = ~id)
model1_robust_stata
msummary(list("model1"=model1),vcov = ~id) # clustered standard errors
?vcov
?msummary
msummary(list("model1"=model1),vcov = list("HC3", NULL, ~gear)) # clustered standard errors
msummary(list("model1"=model1),vcov = ~id) # clustered standard errors
msummary(list("model1"=model1),vcov = list("HC3", NULL, ~id)) # clustered standard errors
msummary(list("model1"=model1),vcov = ~id) # clustered standard errors
model2<-feols(wage ~ marr | id, data = data))
library(fixest)
library("fixest")
install.packages("fixest")
library("fixest")
model2<-feols(wage ~ marr, data = data,panel.id = ~id))
model2<-feols(wage ~ marr, data = data,panel.id = ~id)
msummary(list("model2"=model2),vcov = ~id)) # clustered standard errors
msummary(list("model2"=model2),vcov = ~id)) # clustered standard error
msummary(list("model2"=model2),vcov = ~id) # clustered standard error
expanded <- data %>%  complete(nesting(id), time=full_seq(time, 1))
expanded <- expanded %>%
group_by(id) %>%
mutate(d.wage = wage - dplyr::lag(wage),
d.marr = marr - dplyr::lag(marr)) %>%
ungroup
model2<-lm(d.wage ~ d.marr +0, data=expanded) #+0 suppresses the inclusion of an intercept
summary(model2)
#Plotting the differentiated data
ggplot(data = expanded, aes(x = d.marr, y = d.wage))+
geom_point()+
geom_smooth(method = "lm",formula=y~0+x,se=FALSE)+
labs(x = "Delta Marriage",  y = "Delta Gross income [EUR]",color="") +
theme_bw()
model2<-lm(d.wage ~ d.marr +0, data=expanded) #+0 suppresses the inclusion of an intercept
summary(model2)
plm.fd <- plm(wage~marr+0, data = data, model = "fd")
summary(plm.fd)
library(plm)
plm.fd <- plm(wage~marr+0, data = data, model = "fd")
summary(plm.fd)
library(fixest)  # Run models with feols()
install.packages("fixest")
library(fixest)
unlink("SOEPinR_cache", recursive = TRUE)
xaringan:::list_css(
)
